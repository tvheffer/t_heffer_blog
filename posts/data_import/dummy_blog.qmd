---
title: 'Preparing data in R'
date: '2023-06-30'
categories: ['R', 'Data Wrangling']
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
toc: true
---

This post covers how to read in data, change data types, and index variables in a dataframe

## Read in data to R

**CSV File:**

```{r, eval = FALSE, echo=TRUE, collapse = FALSE}
sat_dat <- read.csv("1_raw_data/workshop_data.csv", header = TRUE)
```

**SPSS File:**

```{r, echo=TRUE, collapse = FALSE, eval=FALSE}
library(haven) 
data_spss <- read_sav("1_raw_data/workshop_data.sav")
```

**Excel File:**

```{r, echo=TRUE, collapse = FALSE, eval=FALSE}
library(readxl)
data_xl <- read_xlsx("1_raw_data/workshop_data.xlsx")
```

**R data:**

.Rdata files store the structure of your variables. Once you finish with data wrangling, it is useful to save your dataset to an .Rdata file so that it maintains any edits (e.g., class of factor, re-leveling etc). Downside: you can only open it in R.

## Data types

[Good Overview](https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures)\
**Data frame**: rows are the unit of observations, columns are the variables.\
**Integer:** `as.integer(44.1)` provides rounded values (44)\
**Numeric:** `as.numeric(44.1)` saves decimals (44.1)\
**Matrix:** can only store data that is all the same type\
**Characters:** string- can use single or double quotes\
**Factor:** used to classify categorical data

## Inspect data types

```{r, eval=F, echo=T}
save(data, file = "name_of_file.Rdata")
load("name_of_file.Rdata") 
```

When you load this data into r, it will be titled politeness

## Convert data types

After you import data, it is necessary to check the structure of the data. <br>

```{r, echo=T, eval=F}
str(sat_dat)

library(dplyr)
glimpse(sat_dat)

class(sat_dat$variable_name)
```

**Nominal variables** (Factors): categories with no particular order (sex, gender, hair color, etc.) <br />

```{r, echo=T, eval=F}
data$sex <- factor(data$sex, labels = c("males", "females"))
```

**Ordinal variables:** categories with order relations (grades, social status, etc.) <br />

```{r, echo=T, eval=F}
data$education <- ordered(data$education)
```

-   Likert items (e.g. ranging from 1"completely disagree" to 5 "completely agree") are **ordinal** and technically should be treated as such when they are a response variable. It makes our life easier to treat them as metric when they are predictors. <br />

**Metric scale level (aka numerical)**: distance relation between the values (income, IQ,SAT, age):<br /> - **Ratio scale**: natural 0 point (income, body height, etc.)<br /> - **Interval scale**: no natural 0 point (temperature Celsius, year, etc.)

## Re-leveling a variable

When you create a factor, the baseline category is *alphabetical* order, usually you want the control group as a baseline category. To change the levels, use the following command.

```{r, echo=T, eval=F}
data$group <- relevel(data$group, ref = "control")
```

## Indexing (extracting elements from a dataset)

When indexing, the order is: \[row,column\] <br /> `dat_data[1,3]` extract the value in row 1, column 3 <br /> `dat_data[5,]` extract all values in row 5 <br />

You can also index multiple columns using `c()` stands for concatenate (or combine)

```{r, echo=TRUE, eval=TRUE}
vec1 <- c(6, 77, 2333, 4, 8)
vec1[, c(2,3)]
```
